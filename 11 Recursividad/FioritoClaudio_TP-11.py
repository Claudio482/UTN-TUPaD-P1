# Ejercicios Pr√°ctico #11 Recursividad
# Alumno: Claudio Fiorito
# Tutor: Franco Gonzalez
# Fecha: 20/5/25

# ----------------------------Ejercicio 1-----------------------------------------------------
# Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego,
# utiliza esa funci√≥n para calcular y mostrar en pantalla el factorial de
# de todos los n√∫meros enteros entre 1 y el n√∫mero que indique el usuario

# def factorial(n):
#     if n == 0 or n == 1:  # Caso base: el factorial de 0 o 1 es 1
#         return 1
#     else:
#         return n * factorial(n - 1)  # Llamada recursiva: n! = n * (n-1)!


# # Solicita al usuario un n√∫mero entero positivo
# n = int(input("Ingrese un n√∫mero entero positivo: "))

# # Mostrar los factoriales del 1 hasta n
# for i in range(1, n + 1):
#     print(f"{i}! = {factorial(i)}")


# ----------------------------Ejercicio 2-----------------------------------------------------
# Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada.
# Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique.

# def fibonacci(n):
#     if n <= 0:  # Caso base: si n es menor o igual a 0, devuelve 0
#         return 0
#     elif n == 1:  # Caso base: si n es 1, devuelve 1
#         return 1
#     else:
#         return fibonacci(n - 1) + fibonacci(n - 2)  # Llamada recursiva: F(n) = F(n-1) + F(n-2)
# # Solicita al usuario un n√∫mero entero positivo
# n = int(input("Ingrese un n√∫mero entero positivo: "))
# # Mostrar la serie de Fibonacci hasta la posici√≥n n
# print("Serie de Fibonacci:")
# for i in range(n + 1):
#     print(f"Fibonacci({i}) = {fibonacci(i)}")


# ----------------------------Ejercicio 3-----------------------------------------------------
# Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente,
# utilizando la f√≥rmula ùëõùëö= ùëõ‚àóùëõ(ùëö‚àí1). Prueba esta funci√≥n en un algoritmo general.

# def potencia(base, exponente):
#     if exponente == 0:  # Caso base cualquier n√∫mero elevado a la potencia 0 es 1
#         return 1
#     else:
#         return base * potencia(base, exponente - 1)  # Llamada recursiva: n^m = n * n^(m-1)
# # Solicita al usuario la base y el exponente
# base = int(input("Ingrese la base: "))
# exponente = int(input("Ingrese el exponente: "))
# # Calcula la potencia utilizando la funci√≥n recursiva
# resultado = potencia(base, exponente)
# # Muestra el resultado
# print(f"{base} elevado a la {exponente} es: {resultado}")


# ----------------------------Ejercicio 4-----------------------------------------------------
# Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base decimal y
# devuelva su representaci√≥n en binario como una cadena de texto.

# def decimal_a_binario(n):
#     if n == 0:  # Caso base: si n es 0, devuelve una cadena vac√≠a
#         return ""
#     else:
#         # Llamada recursiva: divide n entre 2 y concatena el residuo
#         return decimal_a_binario(n // 2) + str(n % 2)

# # Solicita al usuario un n√∫mero entero positivo
# n = int(input("Ingrese un n√∫mero entero positivo: "))
# # Calcula la representaci√≥n binaria utilizando la funci√≥n recursiva
# resultado = decimal_a_binario(n)

# # Muestra el resultado
# if resultado == "":
#     resultado = "0"  # Si el n√∫mero es 0, la representaci√≥n binaria es "0"
# print(f"La representaci√≥n binaria de {n} es: {resultado}")


# ----------------------------Ejercicio 5-----------------------------------------------------
# Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una cadena de
# texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no lo es.
# Requisitos:
# La soluci√≥n debe ser recursiva.
# No se debe usar[::-1] ni la funci√≥n reversed().

# def es_palindromo(palabra):
#     # Caso base: si la longitud de la palabra es 0 o 1, es un pal√≠ndromo
#     if len(palabra) <= 1:
#         return True
#     # Compara el primer y √∫ltimo car√°cter
#     if palabra[0] != palabra[-1]:
#         return False
#     # Llamada recursiva: verifica el resto de la palabra sin los extremos
#     return es_palindromo(palabra[1:-1])

# # Solicita al usuario una palabra
# palabra = input("Ingrese una palabra: ")
# # Verifica si es un pal√≠ndromo utilizando la funci√≥n recursiva
# resultado = es_palindromo(palabra)
# # Muestra el resultado
# if resultado:
#     print(f"La palabra '{palabra}' es un pal√≠ndromo.")

# else:
#     print(f"La palabra '{palabra}' no es un pal√≠ndromo.")


# ----------------------------Ejercicio 6-----------------------------------------------------
# Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un n√∫mero entero
# positivo y devuelva la suma de todos sus d√≠gitos.
# Restricciones:
# No se puede convertir el n√∫mero a string.
# Us√° operaciones matem√°ticas (%, // ) y recursi√≥n.
# Ejemplos:
# suma_digitos(1234) ‚Üí 10 (1 + 2 + 3 + 4)
# suma_digitos(9) ‚Üí 9
# suma_digitos(305) ‚Üí 8 (3 + 0 + 5)

# def suma_digitos(n):
#     # Caso base: si n es 0, la suma es 0
#     if n == 0:
#         return 0
#     else:
#         # Toma el √∫ltimo d√≠gito con n % 10
#         # Llama recursivamente con el resto del n√∫mero (sin el √∫ltimo d√≠gito) usando n // 10
#         return n % 10 + suma_digitos(n // 10)


# # Solicita al usuario un n√∫mero entero positivo
# n = int(input("Ingrese un numero entero positivo: "))
# # Llama a la funci√≥n para calcular la suma de los d√≠gitos
# resultado = suma_digitos(n)
# # Muestra el resultado al usuario
# print(f"La suma de los digitos ingresados es: {resultado}.")


# ----------------------------Ejercicio 7-----------------------------------------------------
# Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n bloques,
# en el siguiente nivel uno menos(n - 1), y as√≠ sucesivamente hasta llegar al √∫ltimo nivel
# con un solo bloque.
# Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el nivel
# m√°s bajo y devuelva el total de bloques que necesita para construir toda la pir√°mide.
# Ejemplos:
# contar_bloques(1) ‚Üí 1 (1)
# contar_bloques(2) ‚Üí 3 (2 + 1)
# contar_bloques(4) ‚Üí 10 (4 + 3 + 2 + 1)


# def contar_bloques(n):
#     # Caso base: si no hay bloques en la base, no hay pir√°mide
#     if n == 0:
#         return 0
#     else:
#         # Suma los bloques del nivel actual (n)
#         # y llama a la funci√≥n para sumar los del nivel superior (n - 1)
#         return n + contar_bloques(n-1)


# # Solicita al usuario la cantidad de bloques de la base (nivel m√°s bajo)
# n = int(input("Ingrese cant de bloques de la base: "))
# # Llama a la funci√≥n para calcular el total de bloques
# resultado = contar_bloques(n)
# # Muestra el resultado
# print(f"La suma de los bloques es:{resultado}.")


# ----------------------------Ejercicio 8-----------------------------------------------------
# Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un n√∫mero
# entero positivo(numero) y un d√≠gito(entre 0 y 9), y devuelva cu√°ntas veces aparece ese d√≠gito
# dentro del n√∫mero.
# Ejemplos:
# contar_digito(12233421, 2) ‚Üí 3
# contar_digito(5555, 5) ‚Üí 4
# contar_digito(123456, 7) ‚Üí 0

def contar_digito(numero, digito):
    if numero == 0:
        return 0
    else:
        ultimo = numero % 10
        # Si el √∫ltimo d√≠gito coincide con el buscado, sumamos 1
        if ultimo == digito:
            return 1 + contar_digito(numero // 10, digito)
        else:
            return contar_digito(numero // 10, digito)


# Solicita los datos al usuario
numero = int(input("Ingrese numero entero positivo: "))
digito = int(input("Ingrese un digito entre 0 y 9: "))

resultado = contar_digito(numero, digito)

print(f"La suma de los bloques es:{resultado}.")
